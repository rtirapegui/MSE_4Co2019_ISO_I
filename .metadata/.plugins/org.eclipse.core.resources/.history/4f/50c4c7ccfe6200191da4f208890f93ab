/*
===============================================================================
 Name        : main.c
 Author      : $(Rodrigo Tirapegui)
 Version     :
 Copyright   : $(copyright)
 Description :
===============================================================================
*/
#include <string.h>
#include "board.h"
#include "os.h"

/****************
 *	Constants	*
 * *************/
#define STACK_SIZE_BYTES   512

/**********
 *	Types *
 *********/
typedef struct
{
   uint8_t  tecIndex;
   tick_t	eventTickstamp;
   bool     eventByFallingEdge;
} ISRQueue_data_t;

typedef struct
{
	tick_t	pulseTickCount;
} tasksQueue_data_t;

/**********************
 *	Application Tasks *
 *********************/

/*
 * Example to test tasks priority scheduling
 */

OS_TASK_CREATE(Tarea_1, STACK_SIZE_BYTES, Task1, (void *) 0x11223344, TASK_PRIORITY_HIGH);
OS_TASK_CREATE(Tarea_2, STACK_SIZE_BYTES, Task2, (void *) 0x11223344, TASK_PRIORITY_LOW);

OS_QUEUE_CREATE(ISR_Queue, 2, sizeof(ISRQueue_data_t));
OS_QUEUE_CREATE(Task_Queue, 1, sizeof(tasksQueue_data_t));

/************************
 *	Private functions	*
 ***********************/
static void initHardware(void)
{
	// Set up and initialize all required blocks and
    // functions related to the board hardware
	Board_Init();
}
static void * Task1(void *arg)
{
   while(1)
   {
	   os_task_delay(15);
      //__WFI();
   }

   return NULL;
}
static void * Task2(void *arg)
{
   while(1)
   {
	  os_task_delay(15);
      //__WFI();
   }

   return NULL;
}
static void tec_1_handler(btnIRQEdge_t edge)
{
	ISRQueue_data_t ISRDataElement;

	ISRDataElement.eventTickstamp = os_task_getTickCount();
	ISRDataElement.tecIndex = 0;

	if(FALLING_EDGE == edge)
	{
		ISRDataElement.eventByFallingEdge = false;
	}
	else
	{
		ISRDataElement.eventByFallingEdge = true;
	}

	// Insert element into TasksQueue
	xQueueSendFromISR(g_ISRQueueHandler, &ISRDataElement, &xHigherPriorityTaskWoken);

	/* Clear interrupt flag for irqChannel */
	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(0));

	/* If xHigherPriorityTaskWoken was set to true you we should yield. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}

/************************
 *	Public functions	*
 ***********************/
int main(void)
{
	/* Initialize board hardware */
	initHardware();

	/* Register button IRQ handler */
	Board_BUTTON_registerIRQHandler(TEC_1, tec_1_handler);

	/* Stay forever */
	os_start();
}

